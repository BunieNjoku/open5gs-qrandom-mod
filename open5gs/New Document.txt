#!/bin/bash

# Start each core function in the background
import subprocess
import time
import os
import signal
import re
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
import numpy as np

# Configuration
num_total_ues = 10  # Total number of UEs to simulate
num_concurrent_ues = 10  # Number of UEs to run concurrently
ue_command = './build/nr-ue -c config/open5gs-ue.yaml -n 10'  # Command to start 10 UEs
tun_base_name = "uesimtun"  # Base name of the TUN interface (e.g., uesimtun0)
wait_timeout = 30  # Timeout to wait for each TUN interface to come up

# Metrics storage for plotting
metrics_data = {
    "tcp_established_connections": [],
    "tcp_average_rtt": [],
    "tcp_cwnd": [],
    "tcp_pacing_rate": [],
    "tcp_delivery_rate": []
}

# Function to check if a specific TUN interface is up
def is_tun_up(tun_name):
    return os.path.exists(f"/sys/class/net/{tun_name}")

# Function to start the initial 10 UEs
def start_initial_ues():
    print(f"Starting initial {num_concurrent_ues} UEs...")
    process = subprocess.Popen(ue_command.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    return process

# Function to stop the UE process gracefully using SIGINT (Ctrl + C equivalent)
def stop_ue_process_gracefully(process):
    print(f"Stopping UE process with PID {process.pid} gracefully (sending SIGINT)...")
    process.send_signal(signal.SIGINT)  # Send SIGINT to gracefully terminate the process
    process.wait()  # Wait for the process to terminate
    print(f"UE process with PID {process.pid} stopped.")

# Function to monitor and cycle through UEs
def monitor_and_cycle_ues(total_ue_count):
    ue_counter = 0
    while ue_counter < total_ue_count:
        # Start the first batch of 10 UEs
        process = start_initial_ues()

        for i in range(num_concurrent_ues):
            tun_interface_name = f"{tun_base_name}{i}"
            if wait_for_tun_interface(tun_interface_name):
                ue_counter += 1
                print(f"UE {ue_counter} connected with {tun_interface_name}.")

                # Collect and plot metrics at each step
                collect_metrics()
                
                # Stop the UE gracefully after the interface is up
                stop_ue_process_gracefully(process)

                # Start the next batch if total UEs have not been reached
                if ue_counter < total_ue_count:
                    print(f"Starting the next batch of UEs after {ue_counter}...")
                    process = start_initial_ues()

                # Exit if all UEs are cycled
                if ue_counter >= total_ue_count:
                    print(f"All {total_ue_count} UEs have been cycled.")
                    return
            else:
                print(f"Timeout waiting for {tun_interface_name}. Retrying...")

# Function to wait for the TUN interface to come up
def wait_for_tun_interface(tun_name, timeout=30):
    print(f"Waiting for {tun_name} to come up...")
    start_time = time.time()
    while time.time() - start_time < timeout:
        if is_tun_up(tun_name):
            print(f"{tun_name} is up!")
            return True
        time.sleep(1)
    print(f"Timeout: {tun_name} did not come up in {timeout} seconds.")
    return False

# Function to collect ss metrics
def collect_metrics():
    cmd = ["ss", "-t", "-i"]
    result = subprocess.run(cmd, stdout=subprocess.PIPE)
    output = result.stdout.decode("utf-8")
    parse_metrics(output)

# Function to parse ss output and collect relevant metrics
def parse_metrics(output):
    # Initialize metric collection
    established_count = 0
    total_rtt = 0.0
    rtt_samples = 0
    total_cwnd = 0
    total_pacing_rate = 0.0
    total_delivery_rate = 0.0

    lines = output.splitlines()

    for i, line in enumerate(lines):
        if "ESTAB" in line:  # Only process established connections
            # Process the second line containing metrics
            metrics_line = lines[i + 1] if i + 1 < len(lines) else None
            if metrics_line:
                # Use regex to extract metrics
                established_count += 1
                rtt_match = re.search(r'rtt:(\d+\.\d+)/', metrics_line)
                if rtt_match:
                    total_rtt += float(rtt_match.group(1))
                    rtt_samples += 1

                cwnd_match = re.search(r'cwnd:(\d+)', metrics_line)
                if cwnd_match:
                    total_cwnd += int(cwnd_match.group(1))

                pacing_rate_match = re.search(r'pacing_rate (\d+\.\d+)Gbps', metrics_line)
                if pacing_rate_match:
                    total_pacing_rate += float(pacing_rate_match.group(1))

                delivery_rate_match = re.search(r'delivery_rate (\d+\.\d+)Gbps', metrics_line)
                if delivery_rate_match:
                    total_delivery_rate += float(delivery_rate_match.group(1))

    # Calculate average RTT if any samples exist
    average_rtt = total_rtt / rtt_samples if rtt_samples > 0 else 0.0

    # Store metrics for plotting
    metrics_data["tcp_established_connections"].append(established_count)
    metrics_data["tcp_average_rtt"].append(average_rtt)
    metrics_data["tcp_cwnd"].append(total_cwnd)
    metrics_data["tcp_pacing_rate"].append(total_pacing_rate)
    metrics_data["tcp_delivery_rate"].append(total_delivery_rate)

# Function to create individual real-time plots
def create_individual_plots():
    fig1, ax1 = plt.subplots(figsize=(10, 6))
    fig2, ax2 = plt.subplots(figsize=(10, 6))
    fig3, ax3 = plt.subplots(figsize=(10, 6))
    fig4, ax4 = plt.subplots(figsize=(10, 6))
    fig5, ax5 = plt.subplots(figsize=(10, 6))

    def animate(i):
        x = np.arange(len(metrics_data["tcp_established_connections"])) + 1  # Start from 1

        # Plot 1: Established TCP Connections
        ax1.cla()
        ax1.plot(x, metrics_data["tcp_established_connections"], 'g', label="Connections")
        ax1.set_title('Established TCP Connections')
        ax1.set_ylabel('Connections')
        ax1.set_xlabel('Number of UEs')
        ax1.grid(True)
        y_max_1 = max(metrics_data["tcp_established_connections"]) if len(metrics_data["tcp_established_connections"]) > 0 else 1
        ax1.set_ylim(0, y_max_1 + 1)  # Y-axis buffer
        ax1.set_xlim(0, max(x) + 1)  # X-axis buffer

        # Plot 2: Average RTT
        ax2.cla()
        ax2.plot(x, metrics_data["tcp_average_rtt"], 'b', label="Average RTT (ms)")
        ax2.set_title('Average RTT')
        ax2.set_ylabel('RTT (ms)')
        ax2.set_xlabel('Number of UEs')
        ax2.grid(True)
        y_max_2 = max(metrics_data["tcp_average_rtt"]) if len(metrics_data["tcp_average_rtt"]) > 0 else 1
        ax2.set_ylim(0, y_max_2 + 1)
        ax2.set_xlim(0, max(x) + 1)

        # Plot 3: Congestion Window (CWND)
        ax3.cla()
        ax3.plot(x, metrics_data["tcp_cwnd"], 'r', label="Congestion Window")
        ax3.set_title('Congestion Window (CWND)')
        ax3.set_ylabel('CWND (Segments)')
        ax3.set_xlabel('Number of UEs')
        ax3.grid(True)
        y_max_3 = max(metrics_data["tcp_cwnd"]) if len(metrics_data["tcp_cwnd"]) > 0 else 1
        ax3.set_ylim(0, y_max_3 + 1)
        ax3.set_xlim(0, max(x) + 1)

        # Plot 4: Pacing Rate
        ax4.cla()
        ax4.plot(x, metrics_data["tcp_pacing_rate"], 'y', label="Pacing Rate (Gbps)")
        ax4.set_title('Pacing Rate')
        ax4.set_ylabel('Rate (Gbps)')
        ax4.set_xlabel('Number of UEs')
        ax4.grid(True)
        y_max_4 = max(metrics_data["tcp_pacing_rate"]) if len(metrics_data["tcp_pacing_rate"]) > 0 else 1
        ax4.set_ylim(0, y_max_4 + 1)
        ax4.set_xlim(0, max(x) + 1)

        # Plot 5: Delivery Rate
        ax5.cla()
        ax5.plot(x, metrics_data["tcp_delivery_rate"], 'c', label="Delivery Rate (Gbps)")
        ax5.set_title('Delivery Rate')
        ax5.set_ylabel('Rate (Gbps)')
        ax5.set_xlabel('Number of UEs')
        ax5.grid(True)
        y_max_5 = max(metrics_data["tcp_delivery_rate"]) if len(metrics_data["tcp_delivery_rate"]) > 0 else 1
        ax5.set_ylim(0, y_max_5 + 1)
        ax5.set_xlim(0, max(x) + 1)

    # Create separate animation for each figure
    ani1 = FuncAnimation(fig1, animate, interval=1000)
    ani2 = FuncAnimation(fig2, animate, interval=1000)
    ani3 = FuncAnimation(fig3, animate, interval=1000)
    ani4 = FuncAnimation(fig4, animate, interval=1000)
    ani5 = FuncAnimation(fig5, animate, interval=1000)

    # Display each figure in its own window
    plt.show()

def main():
    monitor_and_cycle_ues(num_total_ues)
    create_individual_plots()

if __name__ == "__main__":
    main()
./install/bin/open5gs-nrfd &
./install/bin/open5gs-scpd &
./install/bin/open5gs-seppd -c ./install/etc/open5gs/sepp1.yaml &
./install/bin/open5gs-amfd &
./install/bin/open5gs-smfd &
./install/bin/open5gs-upfd &
./install/bin/open5gs-ausfd &
./install/bin/open5gs-udmd &
./install/bin/open5gs-pcfd &
./install/bin/open5gs-nssfd &
./install/bin/open5gs-bsfd &
./install/bin/open5gs-udrd &
./install/bin/open5gs-mmed &
./install/bin/open5gs-sgwcd &
./install/bin/open5gs-sgwud &
./install/bin/open5gs-hssd &
./install/bin/open5gs-pcrfd &

echo "All Open5GS core functions started."

